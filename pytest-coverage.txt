============================= test session starts ==============================
platform linux -- Python 3.11.12, pytest-8.3.5, pluggy-1.5.0
rootdir: /home/runner/work/psnawp/psnawp
configfile: pyproject.toml
testpaths: tests
plugins: vcr-1.0.2, cov-6.1.1
collected 91 items

tests/integration_tests/integration_test_psnawp_api/core/test_authenticator.py . [  1%]
F.                                                                       [  3%]
tests/integration_tests/integration_test_psnawp_api/models/test_client.py F [  4%]
....................                                                     [ 26%]
tests/integration_tests/integration_test_psnawp_api/models/test_game_title.py . [ 27%]
.........                                                                [ 37%]
tests/integration_tests/integration_test_psnawp_api/models/test_group.py . [ 38%]
.E....EEEEEE.                                                            [ 52%]
tests/integration_tests/integration_test_psnawp_api/models/test_search.py . [ 53%]
..                                                                       [ 56%]
tests/integration_tests/integration_test_psnawp_api/models/test_user.py F [ 57%]
.......EEEEEEEEE.E.E..E.E..EE..E.                                        [ 93%]
tests/integration_tests/integration_test_psnawp_api/utils/test_utils_misc.py . [ 94%]
.....                                                                    [100%]

==================================== ERRORS ====================================
________________ ERROR at setup of test_group__group_with_users ________________

    @pytest.fixture(scope="session")
    def friend_user() -> User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
>       return psnawp.user(online_id=FRIEND_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:115: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:43: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f36e76823d0>

    def get_authorization_code(self) -> str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
>               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:277: PSNAWPAuthenticationError
_______________ ERROR at setup of test_group__dming_blocked_user _______________

    @pytest.fixture(scope="session")
    def blocked_user() -> User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
>       return psnawp.user(online_id=BLOCKED_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:115: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:43: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f36e7ac5e10>

    def get_authorization_code(self) -> str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
>               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:277: PSNAWPAuthenticationError
__________________ ERROR at setup of test_group__change_name ___________________

    @pytest.fixture(scope="session")
    def friend_user() -> User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
>       return psnawp.user(online_id=FRIEND_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:115: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:43: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f36e76823d0>

    def get_authorization_code(self) -> str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
>               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:277: PSNAWPAuthenticationError
__________________ ERROR at setup of test_group__kick_member ___________________

    @pytest.fixture(scope="session")
    def friend_user() -> User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
>       return psnawp.user(online_id=FRIEND_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:115: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:43: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f36e76823d0>

    def get_authorization_code(self) -> str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
>               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:277: PSNAWPAuthenticationError
_____________ ERROR at setup of test_group__kick_member_not_found ______________

    @pytest.fixture(scope="session")
    def blocked_user() -> User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
>       return psnawp.user(online_id=BLOCKED_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:115: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:43: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f36e7ac5e10>

    def get_authorization_code(self) -> str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
>               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:277: PSNAWPAuthenticationError
_________________ ERROR at setup of test_group__invite_members _________________

    @pytest.fixture(scope="session")
    def friend_user() -> User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
>       return psnawp.user(online_id=FRIEND_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:115: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:43: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f36e76823d0>

    def get_authorization_code(self) -> str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
>               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:277: PSNAWPAuthenticationError
_____________ ERROR at setup of test_group__invite_members_blocked _____________

    @pytest.fixture(scope="session")
    def blocked_user() -> User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
>       return psnawp.user(online_id=BLOCKED_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:115: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:43: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f36e7ac5e10>

    def get_authorization_code(self) -> str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
>               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:277: PSNAWPAuthenticationError
__________________ ERROR at setup of test_user__get_presence ___________________

    @pytest.fixture(scope="session")
    def friend_user() -> User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
>       return psnawp.user(online_id=FRIEND_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:115: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:43: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f36e76823d0>

    def get_authorization_code(self) -> str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
>               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:277: PSNAWPAuthenticationError
_____________ ERROR at setup of test_user__get_presence_forbidden ______________

    @pytest.fixture(scope="session")
    def blocked_user() -> User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
>       return psnawp.user(online_id=BLOCKED_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:115: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:43: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f36e7ac5e10>

    def get_authorization_code(self) -> str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
>               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:277: PSNAWPAuthenticationError
___________________ ERROR at setup of test_user__friendship ____________________

    @pytest.fixture(scope="session")
    def friend_user() -> User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
>       return psnawp.user(online_id=FRIEND_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:115: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:43: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f36e76823d0>

    def get_authorization_code(self) -> str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
>               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:277: PSNAWPAuthenticationError
______________ ERROR at setup of test_user__accept_friend_request ______________

    @pytest.fixture(scope="session")
    def friend_user() -> User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
>       return psnawp.user(online_id=FRIEND_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:115: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:43: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f36e76823d0>

    def get_authorization_code(self) -> str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
>               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:277: PSNAWPAuthenticationError
__________________ ERROR at setup of test_user__remove_friend __________________

    @pytest.fixture(scope="session")
    def friend_user() -> User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
>       return psnawp.user(online_id=FRIEND_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:115: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:43: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f36e76823d0>

    def get_authorization_code(self) -> str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
>               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:277: PSNAWPAuthenticationError
___________________ ERROR at setup of test_user__get_friends ___________________

    @pytest.fixture(scope="session")
    def friend_user() -> User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
>       return psnawp.user(online_id=FRIEND_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:115: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:43: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f36e76823d0>

    def get_authorization_code(self) -> str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
>               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:277: PSNAWPAuthenticationError
______________ ERROR at setup of test_user__get_friends_forbidden ______________

    @pytest.fixture(scope="session")
    def blocked_user() -> User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
>       return psnawp.user(online_id=BLOCKED_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:115: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:43: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f36e7ac5e10>

    def get_authorization_code(self) -> str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
>               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:277: PSNAWPAuthenticationError
___________________ ERROR at setup of test_user__is_blocked ____________________

    @pytest.fixture(scope="session")
    def friend_user() -> User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
>       return psnawp.user(online_id=FRIEND_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:115: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:43: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f36e76823d0>

    def get_authorization_code(self) -> str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
>               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:277: PSNAWPAuthenticationError
___________ ERROR at setup of test_user__get_shareable_profile_link ____________

    @pytest.fixture(scope="session")
    def friend_user() -> User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
>       return psnawp.user(online_id=FRIEND_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:115: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:43: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f36e76823d0>

    def get_authorization_code(self) -> str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
>               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:277: PSNAWPAuthenticationError
____________ ERROR at setup of test_user__trophy_summary_forbidden _____________

    @pytest.fixture(scope="session")
    def blocked_user() -> User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
>       return psnawp.user(online_id=BLOCKED_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:115: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:43: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f36e7ac5e10>

    def get_authorization_code(self) -> str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
>               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:277: PSNAWPAuthenticationError
_____________ ERROR at setup of test_user__trophy_titles_forbidden _____________

    @pytest.fixture(scope="session")
    def blocked_user() -> User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
>       return psnawp.user(online_id=BLOCKED_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:115: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:43: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f36e7ac5e10>

    def get_authorization_code(self) -> str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
>               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:277: PSNAWPAuthenticationError
________ ERROR at setup of test_user__trophy_titles_for_title_forbidden ________

    @pytest.fixture(scope="session")
    def blocked_user() -> User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
>       return psnawp.user(online_id=BLOCKED_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:115: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:43: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f36e7ac5e10>

    def get_authorization_code(self) -> str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
>               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:277: PSNAWPAuthenticationError
________ ERROR at setup of test_user__trophies_with_progress_forbidden _________

    @pytest.fixture(scope="session")
    def blocked_user() -> User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
>       return psnawp.user(online_id=BLOCKED_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:115: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:43: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f36e7ac5e10>

    def get_authorization_code(self) -> str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
>               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:277: PSNAWPAuthenticationError
_________ ERROR at setup of test_user__trophy_groups_summary_forbidden _________

    @pytest.fixture(scope="session")
    def blocked_user() -> User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
>       return psnawp.user(online_id=BLOCKED_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:115: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:43: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f36e7ac5e10>

    def get_authorization_code(self) -> str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
>               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:277: PSNAWPAuthenticationError
___________________ ERROR at setup of test_user__title_stats ___________________

    @pytest.fixture(scope="session")
    def friend_user() -> User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
>       return psnawp.user(online_id=FRIEND_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:115: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:43: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f36e76823d0>

    def get_authorization_code(self) -> str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
>               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:277: PSNAWPAuthenticationError
__________________ ERROR at setup of test_user__repr_and_str ___________________

    @pytest.fixture(scope="session")
    def friend_user() -> User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
>       return psnawp.user(online_id=FRIEND_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:115: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:43: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f36e76823d0>

    def get_authorization_code(self) -> str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
>               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:277: PSNAWPAuthenticationError
=================================== FAILURES ===================================
_____________ test_authenticator__access_token_from_refresh_token ______________

    @pytest.mark.vcr
    def test_authenticator__access_token_from_refresh_token():
        with my_vcr.use_cassette(f"{inspect.currentframe().f_code.co_name}.json"):
            psnawp = PSNAWP(os.getenv("NPSSO_CODE", "NPSSO_CODE"))
            client = psnawp.me()
>           assert client.online_id == os.getenv("USER_NAME")
E           AssertionError: assert 'VaultTec-Co' == ''
E             
E             + VaultTec-Co

tests/integration_tests/integration_test_psnawp_api/core/test_authenticator.py:24: AssertionError
____________________________ test_client__online_id ____________________________

psnawp_fixture = <psnawp_api.psnawp.PSNAWP object at 0x7f36e941c710>

    @pytest.mark.vcr
    def test_client__online_id(psnawp_fixture: PSNAWP) -> None:
        with my_vcr.use_cassette(f"{inspect.currentframe().f_code.co_name}.json"):
            client = psnawp_fixture.me()
>           assert client.online_id == os.getenv("USER_NAME")
E           AssertionError: assert 'VaultTec-Co' == ''
E             
E             + VaultTec-Co

tests/integration_tests/integration_test_psnawp_api/models/test_client.py:23: AssertionError
_______________________________ test_user__user ________________________________

psnawp_fixture = <psnawp_api.psnawp.PSNAWP object at 0x7f36e941c710>

    @pytest.mark.vcr
    def test_user__user(psnawp_fixture: PSNAWP) -> None:
        with my_vcr.use_cassette(f"{inspect.currentframe().f_code.co_name}.json"):
>           user_example = psnawp_fixture.user(online_id=FRIEND_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/models/test_user.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:115: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:48: in _impl
    return method(*method_args, **method_kwargs)
src/psnawp_api/core/authenticator.py:325: in get
    return self.request_builder.get(**kwargs)
src/psnawp_api/core/request_builder.py:198: in get
    return self.request(method="get", **kwargs)
src/psnawp_api/core/request_builder.py:171: in request
    response = self.session.request(method=method, **kwargs)
../../../.cache/pypoetry/virtualenvs/psnawp-L3gCkbBl-py3.11/lib/python3.11/site-packages/requests/sessions.py:589: in request
    resp = self.send(prep, **send_kwargs)
../../../.cache/pypoetry/virtualenvs/psnawp-L3gCkbBl-py3.11/lib/python3.11/site-packages/requests_ratelimiter/requests_ratelimiter.py:95: in send
    response = super().send(request, **kwargs)
../../../.cache/pypoetry/virtualenvs/psnawp-L3gCkbBl-py3.11/lib/python3.11/site-packages/requests/sessions.py:703: in send
    r = adapter.send(request, **kwargs)
../../../.cache/pypoetry/virtualenvs/psnawp-L3gCkbBl-py3.11/lib/python3.11/site-packages/requests/adapters.py:667: in send
    resp = conn.urlopen(
../../../.cache/pypoetry/virtualenvs/psnawp-L3gCkbBl-py3.11/lib/python3.11/site-packages/urllib3/connectionpool.py:787: in urlopen
    response = self._make_request(
../../../.cache/pypoetry/virtualenvs/psnawp-L3gCkbBl-py3.11/lib/python3.11/site-packages/urllib3/connectionpool.py:534: in _make_request
    response = conn.getresponse()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vcr.patch.VCRRequestsHTTPSConnectiontests/integration_tests/integration_test_psnawp_api/cassettes/test_user__user.json object at 0x7f36e7728e10>
_ = False, kwargs = {}

    def getresponse(self, _=False, **kwargs):
        """Retrieve the response"""
        # Check to see if the cassette has a response for this request. If so,
        # then return it
        if self.cassette.can_play_response_for(self._vcr_request):
            log.info(f"Playing response for {self._vcr_request} from cassette")
            response = self.cassette.play_response(self._vcr_request)
            return VCRHTTPResponse(response)
        else:
            if self.cassette.write_protected and self.cassette.filter_request(self._vcr_request):
>               raise CannotOverwriteExistingCassetteException(
                    cassette=self.cassette,
                    failed_request=self._vcr_request,
                )
E               vcr.errors.CannotOverwriteExistingCassetteException: Can't overwrite existing cassette ('tests/integration_tests/integration_test_psnawp_api/cassettes/test_user__user.json') in your current record mode (<RecordMode.ONCE: 'once'>).
E               No match for the request (<Request (GET) https://us-prof.np.community.playstation.net/userProfile/v1/users//profile2?fields=accountId%2ConlineId%2CcurrentOnlineId>) was found.
E               Found 2 similar requests with 1 different matcher(s) :
E               
E               1 - (<Request (GET) https://ca.account.sony.com/api/authz/v3/oauth/authorize?PlatformPrivacyWs1=minimal&access_type=offline&client_id=09515159-7237-4370-9b40-3806e67c0891&device_base_font_size=10&device_profile=mobile&elements_visibility=no_aclink&enable_scheme_error_code=true&no_captcha=true&redirect_uri=com.scee.psxandroid.scecompcall%3A%2F%2Fredirect&response_type=code&scope=psn%3Amobile.v2.core+psn%3Aclientapp&service_entity=urn%3Aservice-entity%3Apsn&service_logo=ps&smcid=psapp%3Asignin&support_scheme=sneiprls&turnOnTrustedBrowser=true&ui=pr>).
E               Matchers succeeded : ['method']
E               Matchers failed :
E               uri - assertion failure :
E               https://us-prof.np.community.playstation.net/userProfile/v1/users//profile2?fields=accountId%2ConlineId%2CcurrentOnlineId != https://ca.account.sony.com/api/authz/v3/oauth/authorize?PlatformPrivacyWs1=minimal&access_type=offline&client_id=09515159-7237-4370-9b40-3806e67c0891&device_base_font_size=10&device_profile=mobile&elements_visibility=no_aclink&enable_scheme_error_code=true&no_captcha=true&redirect_uri=com.scee.psxandroid.scecompcall%3A%2F%2Fredirect&response_type=code&scope=psn%3Amobile.v2.core+psn%3Aclientapp&service_entity=urn%3Aservice-entity%3Apsn&service_logo=ps&smcid=psapp%3Asignin&support_scheme=sneiprls&turnOnTrustedBrowser=true&ui=pr
E               
E               2 - (<Request (GET) https://us-prof.np.community.playstation.net/userProfile/v1/users/isFakeAccount/profile2?fields=accountId%2ConlineId%2CcurrentOnlineId>).
E               Matchers succeeded : ['method']
E               Matchers failed :
E               uri - assertion failure :
E               https://us-prof.np.community.playstation.net/userProfile/v1/users//profile2?fields=accountId%2ConlineId%2CcurrentOnlineId != https://us-prof.np.community.playstation.net/userProfile/v1/users/isFakeAccount/profile2?fields=accountId%2ConlineId%2CcurrentOnlineId

../../../.cache/pypoetry/virtualenvs/psnawp-L3gCkbBl-py3.11/lib/python3.11/site-packages/vcr/stubs/__init__.py:264: CannotOverwriteExistingCassetteException
-------- generated xml file: /home/runner/work/psnawp/psnawp/pytest.xml --------
================================ tests coverage ================================
_______________ coverage: platform linux, python 3.11.12-final-0 _______________
Name                                                   Stmts   Miss  Cover
--------------------------------------------------------------------------
src/psnawp_api/__init__.py                                 2      0   100%
src/psnawp_api/core/__init__.py                            4      0   100%
src/psnawp_api/core/authenticator.py                     131     28    79%
src/psnawp_api/core/psnawp_exceptions.py                  12      0   100%
src/psnawp_api/core/request_builder.py                    72      9    88%
src/psnawp_api/models/__init__.py                          7      0   100%
src/psnawp_api/models/client.py                           80      0   100%
src/psnawp_api/models/game_title.py                       38      8    79%
src/psnawp_api/models/group/__init__.py                    2      0   100%
src/psnawp_api/models/group/group.py                      56     20    64%
src/psnawp_api/models/group/group_datatypes.py            42     42     0%
src/psnawp_api/models/listing/__init__.py                  2      0   100%
src/psnawp_api/models/listing/pagination_iterator.py      52      2    96%
src/psnawp_api/models/search/__init__.py                   2      0   100%
src/psnawp_api/models/search/search_datatypes.py          74      0   100%
src/psnawp_api/models/search/universal_search.py          62     26    58%
src/psnawp_api/models/title_stats.py                      71      1    99%
src/psnawp_api/models/trophies/__init__.py                 6      0   100%
src/psnawp_api/models/trophies/trophy.py                 104      7    93%
src/psnawp_api/models/trophies/trophy_constants.py        33      0   100%
src/psnawp_api/models/trophies/trophy_group.py            65      0   100%
src/psnawp_api/models/trophies/trophy_summary.py          20      2    90%
src/psnawp_api/models/trophies/trophy_titles.py           70      0   100%
src/psnawp_api/models/trophies/trophy_utils.py             6      0   100%
src/psnawp_api/models/user.py                             87     18    79%
src/psnawp_api/psnawp.py                                  33      1    97%
src/psnawp_api/utils/__init__.py                           3      0   100%
src/psnawp_api/utils/endpoints.py                          3      0   100%
src/psnawp_api/utils/misc.py                              33      0   100%
--------------------------------------------------------------------------
TOTAL                                                   1172    164    86%
Coverage HTML written to dir htmlcov
Coverage XML written to file coverage.xml
=========================== short test summary info ============================
FAILED tests/integration_tests/integration_test_psnawp_api/core/test_authenticator.py::test_authenticator__access_token_from_refresh_token - AssertionError: assert 'VaultTec-Co' == ''
  
  + VaultTec-Co
FAILED tests/integration_tests/integration_test_psnawp_api/models/test_client.py::test_client__online_id - AssertionError: assert 'VaultTec-Co' == ''
  
  + VaultTec-Co
FAILED tests/integration_tests/integration_test_psnawp_api/models/test_user.py::test_user__user - vcr.errors.CannotOverwriteExistingCassetteException: Can't overwrite existing cassette ('tests/integration_tests/integration_test_psnawp_api/cassettes/test_user__user.json') in your current record mode (<RecordMode.ONCE: 'once'>).
No match for the request (<Request (GET) https://us-prof.np.community.playstation.net/userProfile/v1/users//profile2?fields=accountId%2ConlineId%2CcurrentOnlineId>) was found.
Found 2 similar requests with 1 different matcher(s) :

1 - (<Request (GET) https://ca.account.sony.com/api/authz/v3/oauth/authorize?PlatformPrivacyWs1=minimal&access_type=offline&client_id=09515159-7237-4370-9b40-3806e67c0891&device_base_font_size=10&device_profile=mobile&elements_visibility=no_aclink&enable_scheme_error_code=true&no_captcha=true&redirect_uri=com.scee.psxandroid.scecompcall%3A%2F%2Fredirect&response_type=code&scope=psn%3Amobile.v2.core+psn%3Aclientapp&service_entity=urn%3Aservice-entity%3Apsn&service_logo=ps&smcid=psapp%3Asignin&support_scheme=sneiprls&turnOnTrustedBrowser=true&ui=pr>).
Matchers succeeded : ['method']
Matchers failed :
uri - assertion failure :
https://us-prof.np.community.playstation.net/userProfile/v1/users//profile2?fields=accountId%2ConlineId%2CcurrentOnlineId != https://ca.account.sony.com/api/authz/v3/oauth/authorize?PlatformPrivacyWs1=minimal&access_type=offline&client_id=09515159-7237-4370-9b40-3806e67c0891&device_base_font_size=10&device_profile=mobile&elements_visibility=no_aclink&enable_scheme_error_code=true&no_captcha=true&redirect_uri=com.scee.psxandroid.scecompcall%3A%2F%2Fredirect&response_type=code&scope=psn%3Amobile.v2.core+psn%3Aclientapp&service_entity=urn%3Aservice-entity%3Apsn&service_logo=ps&smcid=psapp%3Asignin&support_scheme=sneiprls&turnOnTrustedBrowser=true&ui=pr

2 - (<Request (GET) https://us-prof.np.community.playstation.net/userProfile/v1/users/isFakeAccount/profile2?fields=accountId%2ConlineId%2CcurrentOnlineId>).
Matchers succeeded : ['method']
Matchers failed :
uri - assertion failure :
https://us-prof.np.community.playstation.net/userProfile/v1/users//profile2?fields=accountId%2ConlineId%2CcurrentOnlineId != https://us-prof.np.community.playstation.net/userProfile/v1/users/isFakeAccount/profile2?fields=accountId%2ConlineId%2CcurrentOnlineId
ERROR tests/integration_tests/integration_test_psnawp_api/models/test_group.py::test_group__group_with_users - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/integration_tests/integration_test_psnawp_api/models/test_group.py::test_group__dming_blocked_user - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/integration_tests/integration_test_psnawp_api/models/test_group.py::test_group__change_name - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/integration_tests/integration_test_psnawp_api/models/test_group.py::test_group__kick_member - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/integration_tests/integration_test_psnawp_api/models/test_group.py::test_group__kick_member_not_found - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/integration_tests/integration_test_psnawp_api/models/test_group.py::test_group__invite_members - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/integration_tests/integration_test_psnawp_api/models/test_group.py::test_group__invite_members_blocked - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/integration_tests/integration_test_psnawp_api/models/test_user.py::test_user__get_presence - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/integration_tests/integration_test_psnawp_api/models/test_user.py::test_user__get_presence_forbidden - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/integration_tests/integration_test_psnawp_api/models/test_user.py::test_user__friendship - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/integration_tests/integration_test_psnawp_api/models/test_user.py::test_user__accept_friend_request - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/integration_tests/integration_test_psnawp_api/models/test_user.py::test_user__remove_friend - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/integration_tests/integration_test_psnawp_api/models/test_user.py::test_user__get_friends - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/integration_tests/integration_test_psnawp_api/models/test_user.py::test_user__get_friends_forbidden - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/integration_tests/integration_test_psnawp_api/models/test_user.py::test_user__is_blocked - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/integration_tests/integration_test_psnawp_api/models/test_user.py::test_user__get_shareable_profile_link - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/integration_tests/integration_test_psnawp_api/models/test_user.py::test_user__trophy_summary_forbidden - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/integration_tests/integration_test_psnawp_api/models/test_user.py::test_user__trophy_titles_forbidden - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/integration_tests/integration_test_psnawp_api/models/test_user.py::test_user__trophy_titles_for_title_forbidden - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/integration_tests/integration_test_psnawp_api/models/test_user.py::test_user__trophies_with_progress_forbidden - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/integration_tests/integration_test_psnawp_api/models/test_user.py::test_user__trophy_groups_summary_forbidden - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/integration_tests/integration_test_psnawp_api/models/test_user.py::test_user__title_stats - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
ERROR tests/integration_tests/integration_test_psnawp_api/models/test_user.py::test_user__repr_and_str - psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!
=================== 3 failed, 65 passed, 23 errors in 4.13s ====================
