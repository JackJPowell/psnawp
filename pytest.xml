<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="23" failures="3" skipped="0" tests="91" time="4.277" timestamp="2025-05-05T03:38:36.749759+00:00" hostname="fv-az1374-773"><testcase classname="tests.integration_tests.integration_test_psnawp_api.core.test_authenticator" name="test_authenticator__authentication" time="0.132" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.core.test_authenticator" name="test_authenticator__access_token_from_refresh_token" time="0.044"><failure message="AssertionError: assert 'VaultTec-Co' == ''&#10;  &#10;  + VaultTec-Co">@pytest.mark.vcr
    def test_authenticator__access_token_from_refresh_token():
        with my_vcr.use_cassette(f"{inspect.currentframe().f_code.co_name}.json"):
            psnawp = PSNAWP(os.getenv("NPSSO_CODE", "NPSSO_CODE"))
            client = psnawp.me()
&gt;           assert client.online_id == os.getenv("USER_NAME")
E           AssertionError: assert 'VaultTec-Co' == ''
E             
E             + VaultTec-Co

tests/integration_tests/integration_test_psnawp_api/core/test_authenticator.py:24: AssertionError</failure></testcase><testcase classname="tests.integration_tests.integration_test_psnawp_api.core.test_authenticator" name="test_authenticator__incorrect_npsso" time="0.021" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_client" name="test_client__online_id" time="0.041"><failure message="AssertionError: assert 'VaultTec-Co' == ''&#10;  &#10;  + VaultTec-Co">psnawp_fixture = &lt;psnawp_api.psnawp.PSNAWP object at 0x7fcd68eed210&gt;

    @pytest.mark.vcr
    def test_client__online_id(psnawp_fixture: PSNAWP) -&gt; None:
        with my_vcr.use_cassette(f"{inspect.currentframe().f_code.co_name}.json"):
            client = psnawp_fixture.me()
&gt;           assert client.online_id == os.getenv("USER_NAME")
E           AssertionError: assert 'VaultTec-Co' == ''
E             
E             + VaultTec-Co

tests/integration_tests/integration_test_psnawp_api/models/test_client.py:23: AssertionError</failure></testcase><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_client" name="test_client__account_id" time="0.014" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_client" name="test_client__get_profile_legacy" time="0.028" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_client" name="test_client__account_devices" time="0.013" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_client" name="test_client__get_friends" time="0.037" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_client" name="test_client__friend_requests" time="0.021" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_client" name="test_client__get_presences" time="0.049" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_client" name="test_client__get_groups" time="0.013" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_client" name="test_client__available_to_play" time="0.013" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_client" name="test_client__blocked_list" time="0.014" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_client" name="test_client__get_shareable_profile_link" time="0.023" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_client" name="test_client__trophy_summary" time="0.014" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_client" name="test_client__trophy_titles" time="0.015" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_client" name="test_client__trophy_titles_for_title" time="0.013" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_client" name="test_client__trophies" time="0.015" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_client" name="test_client__trophies_with_progress" time="0.022" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_client" name="test_client__trophy_groups_summary" time="0.018" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_client" name="test_client__trophy_groups_summary_with_progress" time="0.024" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_client" name="test_client__title_stats" time="0.014" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_client" name="test_client__repr_and_str" time="0.022" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_client" name="test_client__get_region" time="0.034" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_game_title" name="test_game_title__np_communication_id" time="0.015" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_game_title" name="test_game_title__wrong_title_id" time="0.015" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_game_title" name="test_game_title__get_title_details" time="0.024" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_game_title" name="test_game_title__get_localized_title_details" time="0.030" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_game_title" name="test_game_title__trophies" time="0.026" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_game_title" name="test_game_title__trophy_groups_summary" time="0.023" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_game_title" name="test_game_title__trophies_game_not_owned_by_user" time="0.016" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_game_title" name="test_game_title__trophy_groups_summary_game_not_owned_by_user" time="0.015" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_game_title" name="test_game_title__trophies_invalid_np_communication_id" time="0.015" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_game_title" name="test_game_title__trophy_groups_summary_invalid_np_communication_id" time="0.014" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_group" name="test_group__group_incorrect_args_None" time="0.006" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_group" name="test_group__group_with_wrong_id" time="0.017" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_group" name="test_group__group_with_users" time="0.261"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def friend_user() -&gt; User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
&gt;       return psnawp.user(online_id=FRIEND_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:115: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:43: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7fcd68d62cd0&gt;

    def get_authorization_code(self) -&gt; str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
&gt;               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:277: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_group" name="test_group__group_with_id" time="0.026" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_group" name="test_group__get_group_information" time="0.026" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_group" name="test_group__repr_and_str" time="0.015" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_group" name="test_group__change_name_dm" time="0.025" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_group" name="test_group__dming_blocked_user" time="0.108"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def blocked_user() -&gt; User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
&gt;       return psnawp.user(online_id=BLOCKED_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:115: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:43: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7fcd68f0b9d0&gt;

    def get_authorization_code(self) -&gt; str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
&gt;               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:277: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_group" name="test_group__change_name" time="0.000"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def friend_user() -&gt; User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
&gt;       return psnawp.user(online_id=FRIEND_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:115: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:43: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7fcd68d62cd0&gt;

    def get_authorization_code(self) -&gt; str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
&gt;               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:277: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_group" name="test_group__kick_member" time="0.000"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def friend_user() -&gt; User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
&gt;       return psnawp.user(online_id=FRIEND_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:115: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:43: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7fcd68d62cd0&gt;

    def get_authorization_code(self) -&gt; str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
&gt;               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:277: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_group" name="test_group__kick_member_not_found" time="0.000"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def blocked_user() -&gt; User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
&gt;       return psnawp.user(online_id=BLOCKED_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:115: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:43: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7fcd68f0b9d0&gt;

    def get_authorization_code(self) -&gt; str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
&gt;               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:277: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_group" name="test_group__invite_members" time="0.000"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def friend_user() -&gt; User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
&gt;       return psnawp.user(online_id=FRIEND_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:115: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:43: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7fcd68d62cd0&gt;

    def get_authorization_code(self) -&gt; str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
&gt;               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:277: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_group" name="test_group__invite_members_blocked" time="0.000"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def blocked_user() -&gt; User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
&gt;       return psnawp.user(online_id=BLOCKED_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:115: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:43: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7fcd68f0b9d0&gt;

    def get_authorization_code(self) -&gt; str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
&gt;               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:277: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_group" name="test_group__leave_group" time="0.024" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_search" name="test_search__universal_search" time="0.019" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_search" name="test_search__get_game_content_id" time="0.018" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_search" name="test_search__get_addon_content_id" time="0.018" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__user" time="0.015"><failure message="vcr.errors.CannotOverwriteExistingCassetteException: Can't overwrite existing cassette ('tests/integration_tests/integration_test_psnawp_api/cassettes/test_user__user.json') in your current record mode (&lt;RecordMode.ONCE: 'once'&gt;).&#10;No match for the request (&lt;Request (GET) https://us-prof.np.community.playstation.net/userProfile/v1/users//profile2?fields=accountId%2ConlineId%2CcurrentOnlineId&gt;) was found.&#10;Found 2 similar requests with 1 different matcher(s) :&#10;&#10;1 - (&lt;Request (GET) https://ca.account.sony.com/api/authz/v3/oauth/authorize?PlatformPrivacyWs1=minimal&amp;access_type=offline&amp;client_id=09515159-7237-4370-9b40-3806e67c0891&amp;device_base_font_size=10&amp;device_profile=mobile&amp;elements_visibility=no_aclink&amp;enable_scheme_error_code=true&amp;no_captcha=true&amp;redirect_uri=com.scee.psxandroid.scecompcall%3A%2F%2Fredirect&amp;response_type=code&amp;scope=psn%3Amobile.v2.core+psn%3Aclientapp&amp;service_entity=urn%3Aservice-entity%3Apsn&amp;service_logo=ps&amp;smcid=psapp%3Asignin&amp;support_scheme=sneiprls&amp;turnOnTrustedBrowser=true&amp;ui=pr&gt;).&#10;Matchers succeeded : ['method']&#10;Matchers failed :&#10;uri - assertion failure :&#10;https://us-prof.np.community.playstation.net/userProfile/v1/users//profile2?fields=accountId%2ConlineId%2CcurrentOnlineId != https://ca.account.sony.com/api/authz/v3/oauth/authorize?PlatformPrivacyWs1=minimal&amp;access_type=offline&amp;client_id=09515159-7237-4370-9b40-3806e67c0891&amp;device_base_font_size=10&amp;device_profile=mobile&amp;elements_visibility=no_aclink&amp;enable_scheme_error_code=true&amp;no_captcha=true&amp;redirect_uri=com.scee.psxandroid.scecompcall%3A%2F%2Fredirect&amp;response_type=code&amp;scope=psn%3Amobile.v2.core+psn%3Aclientapp&amp;service_entity=urn%3Aservice-entity%3Apsn&amp;service_logo=ps&amp;smcid=psapp%3Asignin&amp;support_scheme=sneiprls&amp;turnOnTrustedBrowser=true&amp;ui=pr&#10;&#10;2 - (&lt;Request (GET) https://us-prof.np.community.playstation.net/userProfile/v1/users/isFakeAccount/profile2?fields=accountId%2ConlineId%2CcurrentOnlineId&gt;).&#10;Matchers succeeded : ['method']&#10;Matchers failed :&#10;uri - assertion failure :&#10;https://us-prof.np.community.playstation.net/userProfile/v1/users//profile2?fields=accountId%2ConlineId%2CcurrentOnlineId != https://us-prof.np.community.playstation.net/userProfile/v1/users/isFakeAccount/profile2?fields=accountId%2ConlineId%2CcurrentOnlineId">psnawp_fixture = &lt;psnawp_api.psnawp.PSNAWP object at 0x7fcd68eed210&gt;

    @pytest.mark.vcr
    def test_user__user(psnawp_fixture: PSNAWP) -&gt; None:
        with my_vcr.use_cassette(f"{inspect.currentframe().f_code.co_name}.json"):
&gt;           user_example = psnawp_fixture.user(online_id=FRIEND_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/models/test_user.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:115: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:48: in _impl
    return method(*method_args, **method_kwargs)
src/psnawp_api/core/authenticator.py:325: in get
    return self.request_builder.get(**kwargs)
src/psnawp_api/core/request_builder.py:198: in get
    return self.request(method="get", **kwargs)
src/psnawp_api/core/request_builder.py:171: in request
    response = self.session.request(method=method, **kwargs)
../../../.cache/pypoetry/virtualenvs/psnawp-L3gCkbBl-py3.11/lib/python3.11/site-packages/requests/sessions.py:589: in request
    resp = self.send(prep, **send_kwargs)
../../../.cache/pypoetry/virtualenvs/psnawp-L3gCkbBl-py3.11/lib/python3.11/site-packages/requests_ratelimiter/requests_ratelimiter.py:95: in send
    response = super().send(request, **kwargs)
../../../.cache/pypoetry/virtualenvs/psnawp-L3gCkbBl-py3.11/lib/python3.11/site-packages/requests/sessions.py:703: in send
    r = adapter.send(request, **kwargs)
../../../.cache/pypoetry/virtualenvs/psnawp-L3gCkbBl-py3.11/lib/python3.11/site-packages/requests/adapters.py:667: in send
    resp = conn.urlopen(
../../../.cache/pypoetry/virtualenvs/psnawp-L3gCkbBl-py3.11/lib/python3.11/site-packages/urllib3/connectionpool.py:787: in urlopen
    response = self._make_request(
../../../.cache/pypoetry/virtualenvs/psnawp-L3gCkbBl-py3.11/lib/python3.11/site-packages/urllib3/connectionpool.py:534: in _make_request
    response = conn.getresponse()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;vcr.patch.VCRRequestsHTTPSConnectiontests/integration_tests/integration_test_psnawp_api/cassettes/test_user__user.json object at 0x7fcd68f26f90&gt;
_ = False, kwargs = {}

    def getresponse(self, _=False, **kwargs):
        """Retrieve the response"""
        # Check to see if the cassette has a response for this request. If so,
        # then return it
        if self.cassette.can_play_response_for(self._vcr_request):
            log.info(f"Playing response for {self._vcr_request} from cassette")
            response = self.cassette.play_response(self._vcr_request)
            return VCRHTTPResponse(response)
        else:
            if self.cassette.write_protected and self.cassette.filter_request(self._vcr_request):
&gt;               raise CannotOverwriteExistingCassetteException(
                    cassette=self.cassette,
                    failed_request=self._vcr_request,
                )
E               vcr.errors.CannotOverwriteExistingCassetteException: Can't overwrite existing cassette ('tests/integration_tests/integration_test_psnawp_api/cassettes/test_user__user.json') in your current record mode (&lt;RecordMode.ONCE: 'once'&gt;).
E               No match for the request (&lt;Request (GET) https://us-prof.np.community.playstation.net/userProfile/v1/users//profile2?fields=accountId%2ConlineId%2CcurrentOnlineId&gt;) was found.
E               Found 2 similar requests with 1 different matcher(s) :
E               
E               1 - (&lt;Request (GET) https://ca.account.sony.com/api/authz/v3/oauth/authorize?PlatformPrivacyWs1=minimal&amp;access_type=offline&amp;client_id=09515159-7237-4370-9b40-3806e67c0891&amp;device_base_font_size=10&amp;device_profile=mobile&amp;elements_visibility=no_aclink&amp;enable_scheme_error_code=true&amp;no_captcha=true&amp;redirect_uri=com.scee.psxandroid.scecompcall%3A%2F%2Fredirect&amp;response_type=code&amp;scope=psn%3Amobile.v2.core+psn%3Aclientapp&amp;service_entity=urn%3Aservice-entity%3Apsn&amp;service_logo=ps&amp;smcid=psapp%3Asignin&amp;support_scheme=sneiprls&amp;turnOnTrustedBrowser=true&amp;ui=pr&gt;).
E               Matchers succeeded : ['method']
E               Matchers failed :
E               uri - assertion failure :
E               https://us-prof.np.community.playstation.net/userProfile/v1/users//profile2?fields=accountId%2ConlineId%2CcurrentOnlineId != https://ca.account.sony.com/api/authz/v3/oauth/authorize?PlatformPrivacyWs1=minimal&amp;access_type=offline&amp;client_id=09515159-7237-4370-9b40-3806e67c0891&amp;device_base_font_size=10&amp;device_profile=mobile&amp;elements_visibility=no_aclink&amp;enable_scheme_error_code=true&amp;no_captcha=true&amp;redirect_uri=com.scee.psxandroid.scecompcall%3A%2F%2Fredirect&amp;response_type=code&amp;scope=psn%3Amobile.v2.core+psn%3Aclientapp&amp;service_entity=urn%3Aservice-entity%3Apsn&amp;service_logo=ps&amp;smcid=psapp%3Asignin&amp;support_scheme=sneiprls&amp;turnOnTrustedBrowser=true&amp;ui=pr
E               
E               2 - (&lt;Request (GET) https://us-prof.np.community.playstation.net/userProfile/v1/users/isFakeAccount/profile2?fields=accountId%2ConlineId%2CcurrentOnlineId&gt;).
E               Matchers succeeded : ['method']
E               Matchers failed :
E               uri - assertion failure :
E               https://us-prof.np.community.playstation.net/userProfile/v1/users//profile2?fields=accountId%2ConlineId%2CcurrentOnlineId != https://us-prof.np.community.playstation.net/userProfile/v1/users/isFakeAccount/profile2?fields=accountId%2ConlineId%2CcurrentOnlineId

../../../.cache/pypoetry/virtualenvs/psnawp-L3gCkbBl-py3.11/lib/python3.11/site-packages/vcr/stubs/__init__.py:264: CannotOverwriteExistingCassetteException</failure></testcase><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__user_account_id" time="0.015" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__user_no_argument" time="0.006" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__user_wrong_acc_id" time="0.015" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__prev_online_id" time="0.016" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__user_not_found" time="0.015" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__user_acct_id_not_found" time="0.015" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__get_profile" time="0.025" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__get_presence" time="0.000"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def friend_user() -&gt; User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
&gt;       return psnawp.user(online_id=FRIEND_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:115: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:43: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7fcd68d62cd0&gt;

    def get_authorization_code(self) -&gt; str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
&gt;               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:277: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__get_presence_forbidden" time="0.000"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def blocked_user() -&gt; User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
&gt;       return psnawp.user(online_id=BLOCKED_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:115: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:43: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7fcd68f0b9d0&gt;

    def get_authorization_code(self) -&gt; str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
&gt;               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:277: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__friendship" time="0.000"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def friend_user() -&gt; User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
&gt;       return psnawp.user(online_id=FRIEND_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:115: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:43: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7fcd68d62cd0&gt;

    def get_authorization_code(self) -&gt; str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
&gt;               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:277: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__accept_friend_request" time="0.000"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def friend_user() -&gt; User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
&gt;       return psnawp.user(online_id=FRIEND_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:115: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:43: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7fcd68d62cd0&gt;

    def get_authorization_code(self) -&gt; str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
&gt;               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:277: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__remove_friend" time="0.000"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def friend_user() -&gt; User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
&gt;       return psnawp.user(online_id=FRIEND_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:115: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:43: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7fcd68d62cd0&gt;

    def get_authorization_code(self) -&gt; str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
&gt;               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:277: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__get_friends" time="0.000"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def friend_user() -&gt; User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
&gt;       return psnawp.user(online_id=FRIEND_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:115: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:43: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7fcd68d62cd0&gt;

    def get_authorization_code(self) -&gt; str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
&gt;               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:277: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__get_friends_forbidden" time="0.000"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def blocked_user() -&gt; User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
&gt;       return psnawp.user(online_id=BLOCKED_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:115: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:43: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7fcd68f0b9d0&gt;

    def get_authorization_code(self) -&gt; str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
&gt;               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:277: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__is_blocked" time="0.000"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def friend_user() -&gt; User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
&gt;       return psnawp.user(online_id=FRIEND_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:115: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:43: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7fcd68d62cd0&gt;

    def get_authorization_code(self) -&gt; str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
&gt;               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:277: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__get_shareable_profile_link" time="0.000"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def friend_user() -&gt; User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
&gt;       return psnawp.user(online_id=FRIEND_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:115: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:43: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7fcd68d62cd0&gt;

    def get_authorization_code(self) -&gt; str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
&gt;               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:277: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__trophy_summary" time="0.025" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__trophy_summary_forbidden" time="0.000"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def blocked_user() -&gt; User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
&gt;       return psnawp.user(online_id=BLOCKED_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:115: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:43: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7fcd68f0b9d0&gt;

    def get_authorization_code(self) -&gt; str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
&gt;               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:277: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__trophy_titles" time="0.036" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__trophy_titles_forbidden" time="0.000"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def blocked_user() -&gt; User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
&gt;       return psnawp.user(online_id=BLOCKED_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:115: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:43: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7fcd68f0b9d0&gt;

    def get_authorization_code(self) -&gt; str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
&gt;               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:277: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__trophy_titles_pagination_test" time="0.370" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__trophy_titles_for_title" time="0.032" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__trophy_titles_for_title_forbidden" time="0.000"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def blocked_user() -&gt; User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
&gt;       return psnawp.user(online_id=BLOCKED_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:115: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:43: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7fcd68f0b9d0&gt;

    def get_authorization_code(self) -&gt; str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
&gt;               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:277: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__trophies" time="0.048" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__trophies_with_progress_forbidden" time="0.000"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def blocked_user() -&gt; User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
&gt;       return psnawp.user(online_id=BLOCKED_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:115: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:43: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7fcd68f0b9d0&gt;

    def get_authorization_code(self) -&gt; str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
&gt;               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:277: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__trophies_pagination_test" time="0.046" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__trophy_groups_summary" time="0.057" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__trophy_groups_summary_forbidden" time="0.000"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def blocked_user() -&gt; User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
&gt;       return psnawp.user(online_id=BLOCKED_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:115: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:43: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7fcd68f0b9d0&gt;

    def get_authorization_code(self) -&gt; str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
&gt;               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:277: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__title_stats" time="0.000"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def friend_user() -&gt; User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
&gt;       return psnawp.user(online_id=FRIEND_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:115: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:43: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7fcd68d62cd0&gt;

    def get_authorization_code(self) -&gt; str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
&gt;               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:277: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__title_stats_with_limit" time="0.225" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__title_stats_with_jump" time="0.048" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__repr_and_str" time="0.000"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def friend_user() -&gt; User:
        psnawp = PSNAWP(getenv("NPSSO_CODE", "NPSSO_CODE"))
&gt;       return psnawp.user(online_id=FRIEND_USER_NAME)

tests/integration_tests/integration_test_psnawp_api/conftest.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psnawp_api/psnawp.py:115: in user
    return User.from_online_id(self.authenticator, online_id)
src/psnawp_api/models/user.py:62: in from_online_id
    response: dict[str, Any] = authenticator.get(
src/psnawp_api/core/authenticator.py:43: in _impl
    authorization_code = authenticator_obj.get_authorization_code()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7fcd68d62cd0&gt;

    def get_authorization_code(self) -&gt; str:
        """Obtains the authorization code for PSN authentication.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour. While the refresh code lasts about
        2 months. After 2 months a new npsso code is needed.
    
        :raises PSNAWPAuthenticationError: If authorization is not successful.
    
        """
        headers = {
            "Cookie": f"npsso={self.npsso_cookie}",
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Requested-With": "com.scee.psxandroid",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-User": "?1",
        }
        params = {
            "access_type": "offline",
            "cid": self.cid,
            "client_id": type(self).AUTH_METADATA["CLIENT_ID"],
            "device_base_font_size": "10",
            "device_profile": "mobile",
            "elements_visibility": "no_aclink",
            "enable_scheme_error_code": "true",
            "no_captcha": "true",
            "PlatformPrivacyWs1": "minimal",
            "redirect_uri": type(self).AUTH_METADATA["REDIRECT_URI"],
            "response_type": "code",
            "scope": type(self).AUTH_METADATA["SCOPE"],
            "service_entity": "urn:service-entity:psn",
            "service_logo": "ps",
            "smcid": "psapp:signin",
            "support_scheme": "sneiprls",
            "turnOnTrustedBrowser": "true",
            "ui": "pr",
        }
        response = self.request_builder.get(
            url=f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=headers,
            params=params,
            allow_redirects=False,
        )
    
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query:
            if "4165" in parsed_query["error_code"]:
&gt;               raise PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!",
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

src/psnawp_api/core/authenticator.py:277: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.integration_tests.integration_test_psnawp_api.models.test_user" name="test_user__get_region" time="0.028" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.utils.test_utils_misc" name="test_play_duration_to_timedelta_valid_inputs" time="0.001" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.utils.test_utils_misc" name="test_play_duration_to_timedelta_invalid_inputs" time="0.001" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.utils.test_utils_misc" name="test_extract_region_from_npid" time="0.001" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.utils.test_utils_misc" name="test_extract_npsso_input" time="0.001" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.utils.test_utils_misc" name="test_extract_npsso_invalid_json" time="0.001" /><testcase classname="tests.integration_tests.integration_test_psnawp_api.utils.test_utils_misc" name="test_extract_npsso_invalid_json_key" time="0.001" /></testsuite></testsuites>